# -*- coding: utf-8 -*-
"""ML_Sem2_T2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WwoMhY7PnSJuAb1ghMCi1YG6HuVNbVp9

# Session 1: 06/22/2022
"""

# Midterm Correction

# Imported packages

import sklearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error

# a. Download dataset and upload Dataset

from google.colab import files

upload = files.upload()

# b. Read Dataset

dataset = pd.read_csv('JNJ (2).csv')

dataset.head()

# c. Clean Dataset

dataset.isnull().sum() / len(dataset)

# Since there are no null values, therefore the dataset is cleaned

# d. Fill the missing values of the dataset using the average of column "Low" from the dataset.

## Since there are no null values, there's no need for filling

# Find average of column "Low" from the dataset

dataset['Low'].sum()/len(dataset)

# e. Find the missing percent of each column

## Since the dataset is cleaned, therefore the missing percent of each column is 0 % .

# g. Build a multiple linear regression model to predict the closing price using the volume, 
#    low and high price of the dataset?

x, y = ['Volume', 'High', 'Low'], ['Close']
x = dataset[x].values.reshape(-1, len(x))
y = dataset[y].values.reshape(-1, len(y))

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8)

# Build and Train Model
model = LinearRegression().fit(x_train, y_train)

y_predict = model.predict(x_test)

print(y_predict)

# h. Predict the exact closing price of anyone of the given input. Decide the input values by
#    yourself as relevant to the dataset. You should analyze the dataset before choosing the
#    input.

## Take value from x_test array

x_assumption = x_test[0]

x_assumption = x_assumption.reshape(-1, len(x_assumption))

y_predict_assumption = model.predict(x_assumption)

print(f'Predicted: {y_predict_assumption[0][0]}, Actual: {y_test[0][0]}')

if (y_predict_assumption[0][0] - y_test[0][0]) > 0:
  print("This is a positive error")
else: 
  print("This is a negative error")

# i. Use any one of the evaluation models to justify your predicted result.

MSE = mean_squared_error(y_test, y_predict)
print(MSE)

# j. Write your reflection on this task as a conclusion? (Note: What did you understand?)

## I've come to understand how important machine learning is in our daily lives.
## Nowadays There are so many datas for us to assess and we can't keep manually updating the code
## to keep up with the fast growing pace of the data. Therefore machine learning has become a vital part of
## every industry to help keep up with the big datas that they're handling.